version: 2
jobs:
  build:
    machine:
      image: circleci/classic:201708-01
    working_directory: ~/go/src/github.com/fnproject/ext-metrics
    environment: # apparently expansion doesn't work here yet: https://discuss.circleci.com/t/environment-variable-expansion-in-working-directory/11322
      - GOPATH=/home/circleci/go
      - GOVERSION=1.9.1
      - OS=linux
      - ARCH=amd64
    steps:
      - checkout
      - run:
          name: Update go
          command: |
            go version
            go env GOROOT
            mkdir tmp
            cd tmp
            sudo rm -rf /usr/local/go
            wget https://storage.googleapis.com/golang/go$GOVERSION.$OS-$ARCH.tar.gz
            sudo tar -C /usr/local -xzf go$GOVERSION.$OS-$ARCH.tar.gz
            go version
      - run:
          name: Update Docker
          command: |
            docker version
            sudo service docker stop
            curl -fsSL https://get.docker.com/ | sudo sh
            docker version
      - run:
          name: Install glide
          command: |
            mkdir $GOPATH/bin
            export PATH=$GOPATH/bin:$PATH
            curl https://glide.sh/get | sh
      - run:
          name: Get dependencies
          command: |
            export PATH=$GOPATH/bin:$PATH
            glide install
      #
      # Build and test custom Fn server executable
      #      
      - run:
          name: Build custom Fn server executable
          command: |
            go build
      - run:
          name: Start demo extended Fn server (in the background)
          command: ./ext-metrics
          background: true
      - run:
          name: Start Prometheus (in the background)
          command: |
            echo ---------------- "ip addr show"
            ip addr show
            cho ----------------  "route"
            route
            cho ----------------  awk
            route | grep default | awk '{print $2}'
            cho ----------------  AD
            export AD=`ip -4 addr show scope global dev enp0s3 | grep inet | awk '{print $2}' | cut -d / -f 1`
            echo ---------------- $AD
			echo ---------------- run
            docker run --name=prometheus -d -p 9090:9090 -v ${GOPATH}/src/github.com/fnproject/ext-metrics/examples/developers/prometheus.yml:/etc/prometheus/prometheus.yml --add-host=$AD prom/prometheus
#            docker run --name=prometheus -d -p 9090:9090 -v ${GOPATH}/src/github.com/fnproject/ext-metrics/examples/developers/prometheus.yml:/etc/prometheus/prometheus.yml --add-host="fnserver:`route | grep default | awk '{print $2}'`" prom/prometheus
            echo ---------------- exec1
            docker exec -it prometheus  cat /etc/hosts
            echo ---------------- exec2
            docker exec -it prometheus  cat /etc/prometheus/prometheus.yml            
      - run:
          name: Install Fn CLI
          command: |
            curl -LSs https://raw.githubusercontent.com/fnproject/cli/master/install | sh
      - run:
          name: Run tests on demo extended Fn server
          command: |
            sleep 5
            bash test/create.bash
            bash test/run-cold-sync.bash
            bash test/run-cold-async.bash
            bash test/run-hot-sync.bash
            bash test/run-hot-async.bash
            sleep 120 # TODO: make the test retry rather than have an arbitrary sleep
            echo
            curl http://localhost:8080/v1/statistics
            echo
            curl http://localhost:8080/metrics
            echo
            go test ./statistics/
      - run:
          name: Terminate Prometheus
          command: |
            docker ps
            docker kill prometheus
            docker ps
            sudo rm -r data
      - run:
          name: Terminate demo extended Fn server 
          command: |
            ps -ef | grep "/ext-metrics" | grep -v grep
            ps -ef | grep "/ext-metrics" | grep -v grep | awk '{print "kill -9 " $2}' | sh
      #
      # Build and test custom Fn server docker image
      # This can only be run on master (until https://github.com/fnproject/fn/issues/598 is imlemented)
      #           
      - run:
          name: Install Docker Compose
          command: |
            [[ $CIRCLE_BRANCH != "master" ]] && { echo >&2 "Skipping this step as this is not the master branch"; exit 0; }
            sudo curl -L https://github.com/docker/compose/releases/download/1.17.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
      - run:
          name: Build custom Fn server docker image 
          command: |
            [[ $CIRCLE_BRANCH != "master" ]] && { echo >&2 "Skipping this step as this is not the master branch"; exit 0; }
            cd $GOPATH/src/github.com/fnproject/ext-metrics/examples/operators
            fn build-server -t imageuser/imagename
      - run:
          name: Start custom Fn server docker image and Prometheus
          command: |
            [[ $CIRCLE_BRANCH != "master" ]] && { echo >&2 "Skipping this step as this is not the master branch"; exit 0; }
            cd $GOPATH/src/github.com/fnproject/ext-metrics/examples/operators
            docker-compose up -d
      - run:
          name: Run tests on custom Fn server docker image
          command: |
            [[ $CIRCLE_BRANCH != "master" ]] && { echo >&2 "Skipping this step as this is not the master branch"; exit 0; }
            sleep 5
            bash test/create.bash
            bash test/run-cold-sync.bash
            bash test/run-cold-async.bash
            bash test/run-hot-sync.bash
            bash test/run-hot-async.bash
            sleep 120 # TODO: make the test retry rather than have an arbitrary sleep
            echo Running tests
            go test ./statistics/          
      - run:
          name: Stop custom Fn server docker image and Prometheus
          command: |
            [[ $CIRCLE_BRANCH != "master" ]] && { echo >&2 "Skipping this step as this is not the master branch"; exit 0; }
            cd $GOPATH/src/github.com/fnproject/ext-metrics/examples/operators
            docker-compose down
            sudo rm -r data
              
              